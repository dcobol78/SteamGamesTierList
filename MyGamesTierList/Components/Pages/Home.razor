@page "/"
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@rendermode RenderMode.InteractiveServer


@inject HttpClient httpClient
@inject IStateManager StateManager
@inject NavigationManager NavigationManager
    
<div style="text-align:center; display: flex; justify-content: center; align-items: center; flex-wrap:wrap; height: 100%">
    <h1>Steam URL</h1>
    <input class="form-control" type="text" @bind-value="UserProfileLink" style=""/>
    <button class="btn btn-primary" type="submit" @onclick="SubmitSteamId" style="margin-top: 3px">Search</button>
</div>


@code {
    protected override void OnInitialized()
    {
        var config = new ConfigurationBuilder().
        AddUserSecrets<Program>().
        Build();
        SteamApiKey = config["apikey"];
    }
    string SteamApiKey; 

    public string UserProfileLink = "https://steamcommunity.com/id/DayJopu/";

    string ProfileLinkPattern1 = @"https:\/\/steamcommunity\.com\/id\/([^\/]+)\/?$";
    string ProfileLinkPattern2 = @"https:\/\/steamcommunity\.com\/profiles\/([^\/]+)\/?$";

    string SteamId;

    public async Task SubmitSteamId()
    {
        if (!string.IsNullOrEmpty(UserProfileLink)) // Сделать проверку правлиьности ссылки
        {
            Match match1 = Regex.Match(UserProfileLink, ProfileLinkPattern1);
            Match match2 = Regex.Match(UserProfileLink, ProfileLinkPattern2);

            if (match1.Success  || match2.Success)
            {
                string userVanityUrlName;
                if (match1.Success)
                {
                    userVanityUrlName = match1.Groups[1].Value;
                    var getSteamIdResponse = await httpClient.GetAsync($"http://api.steampowered.com/ISteamUser/ResolveVanityURL/v0001/?key={SteamApiKey}&vanityurl={userVanityUrlName}");
                    var getSteamIdContent = await getSteamIdResponse.Content.ReadAsStringAsync();

                    JObject json = JObject.Parse(getSteamIdContent);

                    SteamId = json["response"]["steamid"].ToString();
                }
                else
                {
                    SteamId = match2.Groups[1].Value;
                }



                if (!string.IsNullOrEmpty(SteamId))
                {
                    var response = await httpClient.GetAsync($"https://api.steampowered.com/IPlayerService/GetOwnedGames/v0001/?key={SteamApiKey}&steamid={SteamId}&format=json&include_appinfo=true");
                    var contents = await response.Content.ReadAsStringAsync();
                    if (!string.IsNullOrEmpty(contents))
                    {
                        StateManager.SetGames(contents);
                        NavigationManager.NavigateTo("TierList");
                    }
                }
            }
        }
    }
}