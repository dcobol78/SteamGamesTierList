@rendermode RenderMode.InteractiveServer
@inject IStateManager StateManager
@inject DragAndDropService dragAndDropService

<h3>GamesList</h3>
<h2>Available Games</h2>
<input type="text" style="color" @bind="search" placeholder="Search..." @oninput="OnSearchChanged" />
<div class="game-filters">
    <label>
        <input type="checkbox" value="@showOnlyPlayed" @onchange="OnCheckBoxChanged" />
        Show Only Played
    </label>
    <label>
        <input type="radio" name="sorttype" value="@sortByLastPlayed" @onchange="OnFSortChanged" />
        Sort By Last Played
    </label>
    <label>
        <input type="radio" name="sorttype" value="@sortByPlayTime" @onchange="OnSSortChanged" />
        Sort By Play Time
    </label>
    <label>
        <input type="radio" name="sorttype" value="@sortByName" checked="checked" @onchange="OnTSortChanged" />
        Sort By Name
    </label>
</div>


<DropTarget Drop="@OnDrop" DragEnter="@OnDragEnter">
    <div class="available-games">
        @foreach (var game in searchresult)
        {
            @if (!string.IsNullOrEmpty(game.img_icon_url))
            {
                <Draggable OnDragCallback="@OnFilterChanged" Data="@game">
                    <img title="@game.name" class="game-item" src="@game.GetImageUrl()" alt="@game.name" />
                </Draggable>
            }
        }
    </div>
</DropTarget>

@code {
    private string search;
    private int playedMoreThan;
    private bool showOnlyPlayed;
    private bool sortByLastPlayed;
    private bool sortByPlayTime;
    private bool sortByName;

    private List<Game> searchresult;

    private int counter = 0;

    public void OnDragEnter(Game game)
    {
        var tier = dragAndDropService.TierData;
        if (tier != null)
        {
            tier.Games.Remove(game);
            StateManager.AddGameToList(game);
            OnFilterChanged();
            tier.RefreshTear();
            dragAndDropService.TierData = null;
        }

    }

    public void OnDrop(Game game)
    {
        
    }

    protected override void OnInitialized()
    {
        StateManager.RefreshGamesList = OnFilterChanged;
        searchresult = StateManager.GetFilteredResult();
        search = string.Empty;
        playedMoreThan = 0;
        showOnlyPlayed = false;
        sortByLastPlayed = false;
        sortByPlayTime = false;
        sortByName = true;
    }


    private void OnSearchChanged(ChangeEventArgs e)
    {
        search = e.Value.ToString();
        StateManager.SaveFilterState(search, playedMoreThan, showOnlyPlayed, sortByLastPlayed, sortByPlayTime, sortByName);
        searchresult = StateManager.GetFilteredResult();
    }

    private void OnCheckBoxChanged()
    {
        showOnlyPlayed = !showOnlyPlayed;
        OnFilterChanged();
    }

    private void OnFSortChanged()
    {
        sortByLastPlayed = true;
        sortByPlayTime = false;
        sortByName = false;
        OnFilterChanged();
    }

    private void OnSSortChanged()
    {
        sortByLastPlayed = false;
        sortByPlayTime = true;
        sortByName = false;
        OnFilterChanged();
    }

    private void OnTSortChanged()
    {
        sortByLastPlayed = false;
        sortByPlayTime = false;
        sortByName = true;
        OnFilterChanged();
    }

    public void OnFilterChanged()
    {
        StateManager.SaveFilterState(search, playedMoreThan, showOnlyPlayed, sortByLastPlayed, sortByPlayTime, sortByName);
        searchresult = StateManager.GetFilteredResult();
        StateHasChanged();
    }
}