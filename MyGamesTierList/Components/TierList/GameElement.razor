@rendermode RenderMode.InteractiveServer
@inject IStateManager StateManager
@inject DragAndDropService dragAndDropService

<DropTarget Drop="@OnDrop" DragEnter="@OnDragEnter">
    <img title="@game.name" class="game-item" src="@game.GetImageUrl()" alt="@game.name" />
</DropTarget>

@code {
    [Parameter]
    public int TierPosition { get; set; }

    [Parameter]
    public Game game { get; set; }

    private Tier tier { get; set; }

    protected override void OnInitialized()
    {
        tier = StateManager.Tiers[TierPosition];
    }

    public void OnDragEnter(Game game)
    {
        var dragAndDropTier = dragAndDropService.TierData;
        if (dragAndDropTier != null)
        {
            if (dragAndDropTier == tier)
            {
                var pos = tier.Games.FindIndex(g => g == this.game);
                StateManager.ReplaceGame(game, tier, pos);
                tier.RefreshTear();
            }
        }
    }

    public void OnDrop(Game game)
    {
        
    }
}
